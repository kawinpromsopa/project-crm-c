- name: Clone repo cachet apps
  git:
    repo: "{{ git_repo }}"
    dest: /home/ubuntu/{{ customer_name }}

- name: Create Dockerfile file
  copy:
    dest: /home/ubuntu/{{ customer_name }}/cachet/Dockerfile
    content: |
      FROM nginx:1.13.9-alpine

      expose {{ nginx_port }}
      CMD ["/sbin/entrypoint.sh"]

      ARG cachet_ver
      ARG archive_url

      ENV cachet_ver ${cachet_ver:-master}
      ENV archive_url ${archive_url:-https://github.com/cachethq/Cachet/archive/${cachet_ver}.tar.gz}

      ENV COMPOSER_VERSION 1.6.3

      RUN apk add --no-cache --update \
          postgresql-client \
          postgresql \
          mysql-client \
          php7 \
          php7-redis \
          php7-apcu \
          php7-bcmath \
          php7-dom \
          php7-ctype \
          php7-curl \
          php7-fpm \
          php7-fileinfo \
          php7-gd \
          php7-iconv \
          php7-intl \
          php7-json \
          sqlite \
          php7-mbstring \
          php7-mcrypt \
          php7-mysqlnd \
          php7-opcache \
          php7-openssl \
          php7-pdo \
          php7-pdo_mysql \
          php7-pdo_pgsql \
          php7-pdo_sqlite \
          php7-phar \
          php7-posix \
          php7-session \
          php7-sqlite3 \
          php7-simplexml \
          php7-soap \
          php7-xml \
          php7-xmlwriter \
          php7-zip \
          php7-zlib \
          php7-tokenizer \
          wget sqlite git curl bash grep \
          supervisor

      # forward request and error logs to docker log collector
      RUN ln -sf /dev/stdout /var/log/nginx/access.log && \
          ln -sf /dev/stderr /var/log/nginx/error.log && \
          ln -sf /dev/stdout /var/log/php7/error.log && \
          ln -sf /dev/stderr /var/log/php7/error.log

      RUN adduser -S -s /bin/bash -u 1001 -G root www-data

      RUN touch /var/run/nginx.pid && \
          chown -R www-data:root /var/run/nginx.pid /etc/php7/php-fpm.d

      RUN mkdir -p /var/www/html && \
          mkdir -p /usr/share/nginx/cache && \
          mkdir -p /var/cache/nginx && \
          mkdir -p /var/lib/nginx && \
          chown -R www-data:root /var/www /usr/share/nginx/cache /var/cache/nginx /var/lib/nginx/

      # Install composer
      RUN wget https://getcomposer.org/installer -O /tmp/composer-setup.php && \
          wget https://composer.github.io/installer.sig -O /tmp/composer-setup.sig && \
          php -r "if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }" && \
          php /tmp/composer-setup.php --version=$COMPOSER_VERSION --install-dir=bin && \
          php -r "unlink('/tmp/composer-setup.php');"

      WORKDIR /var/www/html/
      USER 1001

      RUN wget ${archive_url} && \
          tar xzf ${cachet_ver}.tar.gz --strip-components=1 && \
          chown -R www-data:root /var/www/html && \
          rm -r ${cachet_ver}.tar.gz && \
          php /bin/composer.phar global require "hirak/prestissimo:^0.3" && \
          php /bin/composer.phar install -o && \
          rm -rf bootstrap/cache/*

      COPY conf/php-fpm-pool.conf /etc/php7/php-fpm.d/www.conf
      COPY conf/supervisord.conf /etc/supervisor/supervisord.conf
      COPY conf/nginx.conf /etc/nginx/nginx.conf
      COPY conf/nginx-site.conf /etc/nginx/conf.d/default.conf
      COPY conf/.env.docker /var/www/html/.env
      COPY entrypoint.sh /sbin/entrypoint.sh

      USER root
      RUN chmod g+rwx /var/run/nginx.pid && \
          chmod -R g+rw /var/www /usr/share/nginx/cache /var/cache/nginx /var/lib/nginx/ /etc/php7/php-fpm.d storage
      USER 1001

- name: Create docker-compose file
  copy:
    dest: /home/ubuntu/{{ customer_name }}/cachet/docker-compose.yml
    content: |
      version: "3"
      services:
        {{ customer_name }}-postgres:
          image: postgres:9.5
          volumes:
            - /var/lib/postgresql/data
          environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
          restart: always
        {{ customer_name }}-cachet:
          build:
            context: .
            args:
              - cachet_ver=v2.3.15
          ports:
            - {{ nginx_port }}:{{ nginx_port }}
          links:
            - {{ customer_name }}-postgres:{{ customer_name }}-postgres
          environment:
            - DB_DRIVER=pgsql
            - DB_HOST={{ customer_name }}-postgres
            - DB_PORT=5432
            - DB_DATABASE=postgres
            - DB_USERNAME=postgres
            - DB_PASSWORD=postgres
            - DB_PREFIX=chq_
            - APP_KEY=${APP_KEY:-null}
            - APP_LOG=errorlog
            - DEBUG=false
          depends_on:
            - {{ customer_name }}-postgres
          restart: on-failure

- name: Create nginx-site.conf file
  copy:
    dest: /home/ubuntu/{{ customer_name }}/cachet/conf/nginx-site.conf
    content: |
      server {
          listen {{ nginx_port }} default; ## Listen for ipv4; this line is default and implied

          # Make site accessible from http://localhost/
          server_name localhost;
          root /var/www/html/public;

          index index.php;

          charset utf-8;

          location / {
              try_files $uri /index.php$is_args$args;
          }
          # Cache images
          location ~* .(jpg|jpeg|png|gif|ico|css|js|ttf|svg)$ {
            expires 365d;
          }

          # Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
          location ~ \.php$ {

              fastcgi_pass_header Set-Cookie;
              fastcgi_pass_header Cookie;
              fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

              fastcgi_cache_bypass 1;
              fastcgi_no_cache 1;

              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              include fastcgi_params;
              fastcgi_pass 127.0.0.1:9000;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_index index.php;
              fastcgi_keep_conn on;
          }

          location ~ /\.ht {
              deny all;
          }
      }
- name: docker build & up
  shell: |
    cd /home/ubuntu/{{ customer_name }}/cachet/
    bash build

